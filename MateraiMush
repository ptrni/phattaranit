<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="utf-8" />
  <title>GLB from Blender with Lights Control</title>
  <style>html,body{margin:0;height:100%} canvas{display:block}</style>

  <!-- Three.js -->
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/build/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>

  <!-- Loaders -->
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>

  <!-- dat.GUI -->
  <script src="https://cdn.jsdelivr.net/npm/dat.gui"></script>
</head>
<body>
<script>
  // Scene / Camera / Renderer
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(60, innerWidth/innerHeight, 0.1, 100);
  camera.position.set(0, 1, 3);  // ตำแหน่งของกล้อง

  const renderer = new THREE.WebGLRenderer({antialias:true});
  renderer.setSize(innerWidth, innerHeight);
  document.body.appendChild(renderer.domElement);

  // Controls
  new THREE.OrbitControls(camera, renderer.domElement);

  // 🔹 โหลด GLB จาก Blender
  const loader = new THREE.GLTFLoader();
  loader.load('Mari.glb', (gltf) => {
    const model = gltf.scene;
    model.scale.set(0.5, 0.5, 0.5);  // ปรับขนาดโมเดล
    scene.add(model);
    console.log("✅ GLB Loaded");
  }, undefined, (error) => {
    console.error('❌ Error loading GLB:', error);
  });

  // 🔹 แสงต่างๆ
  const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
  directionalLight.position.set(1, 1, 2);
  scene.add(directionalLight);

  const pointLight = new THREE.PointLight(0xff0000, 1, 100);
  pointLight.position.set(5, 5, 5);
  scene.add(pointLight);

  const spotLight = new THREE.SpotLight(0x00ff00, 1);
  spotLight.position.set(10, 10, 10);
  scene.add(spotLight);

  // ✅ เพิ่ม GUI สำหรับควบคุมแสง
  const gui = new dat.GUI();
  
  // Directional Light
  const directionalLightFolder = gui.addFolder('Directional Light');
  directionalLightFolder.add(directionalLight, 'intensity', 0, 2);
  directionalLightFolder.add(directionalLight.position, 'x', -100, 100);
  directionalLightFolder.add(directionalLight.position, 'y', -100, 100);
  directionalLightFolder.add(directionalLight.position, 'z', -100, 100);
  directionalLightFolder.open();

  // Point Light
  const pointLightFolder = gui.addFolder('Point Light');
  pointLightFolder.add(pointLight, 'intensity', 0, 2);
  pointLightFolder.add(pointLight.position, 'x', -100, 100);
  pointLightFolder.add(pointLight.position, 'y', -100, 100);
  pointLightFolder.add(pointLight.position, 'z', -100, 100);
  pointLightFolder.open();

  // Spot Light
  const spotLightFolder = gui.addFolder('Spot Light');
  spotLightFolder.add(spotLight, 'intensity', 0, 2);
  spotLightFolder.add(spotLight.position, 'x', -100, 100);
  spotLightFolder.add(spotLight.position, 'y', -100, 100);
  spotLightFolder.add(spotLight.position, 'z', -100, 100);
  spotLightFolder.open();

  // Resize & Render
  window.addEventListener('resize', () => {
    camera.aspect = innerWidth / innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(innerWidth, innerHeight);
  });

  (function loop() {
    renderer.render(scene, camera);
    requestAnimationFrame(loop);
  })();
</script>
</body>
</html>
